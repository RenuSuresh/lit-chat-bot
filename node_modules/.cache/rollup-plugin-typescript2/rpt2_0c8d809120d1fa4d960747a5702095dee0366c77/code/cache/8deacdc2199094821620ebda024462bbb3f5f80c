{"code":"import { __decorate } from \"tslib\";\r\nimport { LitElement, html, nothing } from \"lit\";\r\nimport { customElement, property, state } from \"lit/decorators.js\";\r\nimport { when } from \"lit/directives/when.js\";\r\nimport { styles } from \"./styles.css\";\r\nlet AIChat = class AIChat extends LitElement {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.isNewConversation = true;\r\n        this.messages = [\r\n            {\r\n                sender: \"bot\",\r\n                text: \"Hi Manthan, I am easybot. I am here to help you with your concern\",\r\n            },\r\n            {\r\n                sender: \"bot\",\r\n                text: \"Please state your concerns regarding your order\",\r\n                time: \"12:28 PM\",\r\n            },\r\n            {\r\n                sender: \"user\",\r\n                text: \"Where is my order?\",\r\n                time: \"12:30 PM\",\r\n            },\r\n            {\r\n                sender: \"user\",\r\n                text: \"Where is my order?\",\r\n                time: \"12:30 PM\",\r\n            },\r\n            {\r\n                sender: \"user\",\r\n                text: \"Where is my order?\",\r\n                time: \"12:30 PM\",\r\n            },\r\n            {\r\n                sender: \"user\",\r\n                text: \"Where is my order?\",\r\n                time: \"12:30 PM\",\r\n            },\r\n            {\r\n                sender: \"user\",\r\n                text: \"Where is my order?\",\r\n                time: \"12:30 PM\",\r\n            },\r\n            {\r\n                sender: \"user\",\r\n                text: \"Where is my order?\",\r\n                time: \"12:30 PM\",\r\n            },\r\n            {\r\n                sender: \"user\",\r\n                text: \"Where is my order?\",\r\n                time: \"12:30 PM\",\r\n            },\r\n            {\r\n                sender: \"user\",\r\n                text: \"Where is my order?\",\r\n                time: \"12:30 PM\",\r\n            },\r\n            {\r\n                sender: \"user\",\r\n                text: \"Where is my order?\",\r\n                time: \"12:30 PM\",\r\n            },\r\n        ];\r\n        this.newMessage = \"\";\r\n    }\r\n    render() {\r\n        return html `\n\t\t\t<div class=\"header\">\n\t\t\t\t<h2 class=\"chat-title\">Chat with Easybot</h2>\n\t\t\t\t<p class=\"chat-subtitle\">Get help 24/7</p>\n\t\t\t</div>\n\n\t\t\t<div class=\"chat-container\">\n\t\t\t\t${this.isNewConversation\r\n            ? html `\n\t\t\t\t\t\t\t<div class=\"chat-timestamp-wrapper\">\n\t\t\t\t\t\t\t\t<div class=\"timestamp-left-line\"></div>\n\t\t\t\t\t\t\t\t<div class=\"timestamp\">Today â€¢ 12:28 PM</div>\n\t\t\t\t\t\t\t\t<div class=\"timestamp-right-line\"></div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t  `\r\n            : nothing}\n\t\t\t\t${this.messages.map((msg) => html `\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t${when(msg.sender === \"bot\", () => html `\n\t\t\t\t\t\t\t\t\t\t<div class=\"bot-message-container\">\n\t\t\t\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\t\t\t\tsrc=\"https://assets.pharmeasy.in/web-assets/_next/icons/mobile-logo.svg\"\n\t\t\t\t\t\t\t\t\t\t\t\twidth=\"40\"\n\t\t\t\t\t\t\t\t\t\t\t\theight=\"40\"\n\t\t\t\t\t\t\t\t\t\t\t\talt=\"bot-icon\"\n\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t<div class=\"bot-message\">${msg.text}</div>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div class=\"bot-timestamp\">${msg.time}</div>\n\t\t\t\t\t\t\t\t\t`, () => html `\n\t\t\t\t\t\t\t\t\t\t<div class=\"user-message-container\">\n\t\t\t\t\t\t\t\t\t\t\t<div class=\"user-message\">${msg.text}</div>\n\t\t\t\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\t\t\t\tsrc=\"https://assets.pharmeasy.in/web-assets/_next/icons/gpay.svg\"\n\t\t\t\t\t\t\t\t\t\t\t\twidth=\"40\"\n\t\t\t\t\t\t\t\t\t\t\t\theight=\"40\"\n\t\t\t\t\t\t\t\t\t\t\t\talt=\"user-icon\"\n\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div class=\"user-timestamp\">${msg.time}</div>\n\t\t\t\t\t\t\t\t\t`)}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t`)}\n\n\t\t\t\t<div class=\"input-area\">\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tplaceholder=\"Type your query here\"\n\t\t\t\t\t\t.value=${this.newMessage}\n\t\t\t\t\t\t@input=${this.handleInput}\n\t\t\t\t\t\t@keypress=${this.handleKeyPress}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t`;\r\n    }\r\n    handleInput(e) {\r\n        this.newMessage = e.target.value;\r\n    }\r\n    handleKeyPress(e) {\r\n        if (e.key === \"Enter\" && this.newMessage.trim()) {\r\n            this.sendMessage();\r\n        }\r\n    }\r\n    sendMessage() {\r\n        this.messages = [\r\n            ...this.messages,\r\n            {\r\n                sender: \"user\",\r\n                text: this.newMessage,\r\n                time: new Date().toLocaleTimeString([], {\r\n                    hour: \"2-digit\",\r\n                    minute: \"2-digit\",\r\n                }),\r\n            },\r\n        ];\r\n        this.newMessage = \"\";\r\n        this.requestUpdate();\r\n        // Scroll to bottom\r\n        setTimeout(() => {\r\n            var _a;\r\n            const container = (_a = this.shadowRoot) === null || _a === void 0 ? void 0 : _a.querySelector(\".chat-container\");\r\n            if (container) {\r\n                container.scrollTop = container.scrollHeight;\r\n            }\r\n        }, 0);\r\n        // Simulate bot response after delay\r\n        setTimeout(() => {\r\n            this.messages = [\r\n                ...this.messages,\r\n                {\r\n                    sender: \"bot\",\r\n                    text: 'I received your message about: \"' + this.newMessage + '\"',\r\n                    time: new Date().toLocaleTimeString([], {\r\n                        hour: \"2-digit\",\r\n                        minute: \"2-digit\",\r\n                    }),\r\n                },\r\n            ];\r\n            this.requestUpdate();\r\n        }, 1000);\r\n    }\r\n};\r\nAIChat.styles = styles;\r\n__decorate([\r\n    state()\r\n], AIChat.prototype, \"isNewConversation\", void 0);\r\n__decorate([\r\n    property({ type: Array })\r\n], AIChat.prototype, \"messages\", void 0);\r\n__decorate([\r\n    property({ type: String })\r\n], AIChat.prototype, \"newMessage\", void 0);\r\nAIChat = __decorate([\r\n    customElement(\"ai-chat\")\r\n], AIChat);\r\nexport { AIChat };\r\n","references":["/Users/renusureshganvir/Documents/pharmeasy/api-chat-bot/my-lit-components/node_modules/lit/index.d.ts","/Users/renusureshganvir/Documents/pharmeasy/api-chat-bot/my-lit-components/node_modules/lit/decorators.d.ts","/Users/renusureshganvir/Documents/pharmeasy/api-chat-bot/my-lit-components/node_modules/lit/directives/when.d.ts","/Users/renusureshganvir/Documents/pharmeasy/api-chat-bot/my-lit-components/src/components/ai-chat/styles.css.ts"],"dts":{"name":"/Users/renusureshganvir/Documents/pharmeasy/api-chat-bot/my-lit-components/node_modules/.cache/rollup-plugin-typescript2/placeholder/ai-chat/ai-chat.d.ts","writeByteOrderMark":false,"text":"import { LitElement } from \"lit\";\r\nexport declare class AIChat extends LitElement {\r\n    static styles: import(\"lit\").CSSResult;\r\n    private isNewConversation;\r\n    messages: ({\r\n        sender: string;\r\n        text: string;\r\n        time?: undefined;\r\n    } | {\r\n        sender: string;\r\n        text: string;\r\n        time: string;\r\n    })[];\r\n    newMessage: string;\r\n    render(): import(\"lit-html\").TemplateResult<1>;\r\n    handleInput(e: Event): void;\r\n    handleKeyPress(e: KeyboardEvent): void;\r\n    sendMessage(): void;\r\n}\r\n"}}
