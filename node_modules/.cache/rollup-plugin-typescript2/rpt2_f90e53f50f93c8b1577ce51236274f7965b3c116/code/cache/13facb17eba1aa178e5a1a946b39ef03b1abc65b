{"code":"import { __decorate } from \"tslib\";\r\nimport { html, LitElement } from \"lit\";\r\nimport { customElement, property, state } from \"lit/decorators.js\";\r\nimport \"./chat-message\";\r\nimport { styles } from \"./styles.css\";\r\nlet AIChatBot = class AIChatBot extends LitElement {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.apiUrl = \"\";\r\n        this.title = \"AI Assistant\";\r\n        this.placeholder = \"Type your message...\";\r\n        this._messages = [];\r\n        this._inputValue = \"\";\r\n        this._isLoading = false;\r\n    }\r\n    render() {\r\n        return html `\n\t\t\t<div class=\"chat-container\">\n\t\t\t\t<div class=\"chat-header\">\n\t\t\t\t\t<h2>${this.title}</h2>\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"messages-container\">\n\t\t\t\t\t${this._messages.map((msg) => html `\n\t\t\t\t\t\t\t<chat-message\n\t\t\t\t\t\t\t\t.text=${msg.text}\n\t\t\t\t\t\t\t\t.sender=${msg.sender}\n\t\t\t\t\t\t\t></chat-message>\n\t\t\t\t\t\t`)}\n\t\t\t\t\t${this._isLoading\r\n            ? html `<div class=\"loading\">Bot is typing...</div>`\r\n            : \"\"}\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"input-container\">\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t.value=${this._inputValue}\n\t\t\t\t\t\t@input=${this._handleInput}\n\t\t\t\t\t\t@keydown=${this._handleKeyDown}\n\t\t\t\t\t\tplaceholder=${this.placeholder}\n\t\t\t\t\t\t?disabled=${this._isLoading}\n\t\t\t\t\t/>\n\t\t\t\t\t<button\n\t\t\t\t\t\t@click=${this._sendMessage}\n\t\t\t\t\t\t?disabled=${!this._inputValue.trim() || this._isLoading}\n\t\t\t\t\t>\n\t\t\t\t\t\tSend\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t`;\r\n    }\r\n    _handleInput(e) {\r\n        this._inputValue = e.target.value;\r\n    }\r\n    _handleKeyDown(e) {\r\n        if (e.key === \"Enter\" && this._inputValue.trim()) {\r\n            this._sendMessage();\r\n        }\r\n    }\r\n    async _sendMessage() {\r\n        const userMessage = this._inputValue.trim();\r\n        if (!userMessage)\r\n            return;\r\n        // Add user message\r\n        this._messages = [...this._messages, { text: userMessage, sender: \"user\" }];\r\n        this._inputValue = \"\";\r\n        this._isLoading = true;\r\n        try {\r\n            // Call your AI API\r\n            const botResponse = await this._getAIResponse(userMessage);\r\n            // Add bot response\r\n            this._messages = [\r\n                ...this._messages,\r\n                { text: botResponse, sender: \"bot\" },\r\n            ];\r\n        }\r\n        catch (error) {\r\n            console.error(\"Error getting AI response:\", error);\r\n            this._messages = [\r\n                ...this._messages,\r\n                {\r\n                    text: \"Sorry, I encountered an error. Please try again.\",\r\n                    sender: \"bot\",\r\n                },\r\n            ];\r\n        }\r\n        finally {\r\n            this._isLoading = false;\r\n        }\r\n    }\r\n    async _getAIResponse(message) {\r\n        if (!this.apiUrl) {\r\n            // Mock response if no API URL is provided\r\n            return new Promise((resolve) => {\r\n                setTimeout(() => {\r\n                    resolve(`This is a mock response to: \"${message}\"`);\r\n                }, 1000);\r\n            });\r\n        }\r\n        const response = await fetch(this.apiUrl, {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify({ message }),\r\n        });\r\n        if (!response.ok) {\r\n            throw new Error(`API request failed with status ${response.status}`);\r\n        }\r\n        const data = await response.json();\r\n        return data.reply;\r\n    }\r\n};\r\nAIChatBot.styles = styles;\r\n__decorate([\r\n    property({ type: String })\r\n], AIChatBot.prototype, \"apiUrl\", void 0);\r\n__decorate([\r\n    property({ type: String })\r\n], AIChatBot.prototype, \"title\", void 0);\r\n__decorate([\r\n    property({ type: String })\r\n], AIChatBot.prototype, \"placeholder\", void 0);\r\n__decorate([\r\n    state()\r\n], AIChatBot.prototype, \"_messages\", void 0);\r\n__decorate([\r\n    state()\r\n], AIChatBot.prototype, \"_inputValue\", void 0);\r\n__decorate([\r\n    state()\r\n], AIChatBot.prototype, \"_isLoading\", void 0);\r\nAIChatBot = __decorate([\r\n    customElement(\"ai-chat-bot\")\r\n], AIChatBot);\r\nexport { AIChatBot };\r\n","references":["/Users/renusureshganvir/Documents/pharmeasy/api-chat-bot/my-lit-components/node_modules/lit/index.d.ts","/Users/renusureshganvir/Documents/pharmeasy/api-chat-bot/my-lit-components/node_modules/lit/decorators.d.ts","/Users/renusureshganvir/Documents/pharmeasy/api-chat-bot/my-lit-components/src/components/ai-chat-bot/chat-message.ts","/Users/renusureshganvir/Documents/pharmeasy/api-chat-bot/my-lit-components/src/components/ai-chat-bot/styles.css.ts"],"dts":{"name":"/Users/renusureshganvir/Documents/pharmeasy/api-chat-bot/my-lit-components/node_modules/.cache/rollup-plugin-typescript2/placeholder/ai-chat-bot/ai-chat-bot.d.ts","writeByteOrderMark":false,"text":"import { LitElement } from \"lit\";\r\nimport \"./chat-message\";\r\nexport declare class AIChatBot extends LitElement {\r\n    static styles: import(\"lit\").CSSResult;\r\n    apiUrl: string;\r\n    title: string;\r\n    placeholder: string;\r\n    private _messages;\r\n    private _inputValue;\r\n    private _isLoading;\r\n    render(): import(\"lit-html\").TemplateResult<1>;\r\n    private _handleInput;\r\n    private _handleKeyDown;\r\n    private _sendMessage;\r\n    private _getAIResponse;\r\n}\r\n"}}
